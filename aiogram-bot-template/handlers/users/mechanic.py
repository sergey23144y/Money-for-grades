from aiogram import types
from aiogram.dispatcher import FSMContext
import requests

from handlers.users.instruction import instruction

from loader import dp, bot
from states.ClassUser import User

new_user = False
email = ''
phon = ''
score_user = ''
user_token = ''


@dp.callback_query_handler(text="connect_program")
async def connect(call: types.CallbackQuery, state: FSMContext):
    await _connect(call.message)


@dp.message_handler(state=User.user_email)
async def registr_1(message: types.Message, state: FSMContext):
    global new_user, email
    email = message.text
    await state.update_data(user_email=email)

    if await check_email(email):
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω!\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å")
        new_user = False
    else:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        new_user = True
    await User.user_password.set()


@dp.message_handler(state=User.user_password)
async def password(message: types.Message, state: FSMContext):
    global new_user
    if(new_user):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Ç–≤–æ—Ä–Ω–æ")
        password = message.text
        await state.update_data(user_password=password)
        await User.user_password_sweaty.set()
    else:
        await Authorization(message, state)


@dp.message_handler(state=User.user_password_sweaty)
async def Registration(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get('user_email')
    password = data.get('user_password')
    await state.finish()
    await user_reg(email, password, message, state)


async def Authorization(message: types.Message, state: FSMContext):
    password = message.text
    await state.update_data(user_password=password)
    global email
    await autor_user(email, password, message,state)


async def autor_user(mail,password, message: types.Message,state: FSMContext ):
    url = "https://admin.sokratapp.ru/api/api-token-auth/"

    data_auto = {
        "username": f"{mail}",
        "password": f"{password}"
    }
    try:
        global email, phon, score_user, user_token
        r_admin = requests.post(url, data=data_auto)
        r_admin_json = r_admin.json()

        url_user = f"https://admin.sokratapp.ru/api/user_me"

        headers = {'Authorization': f'Token {r_admin_json["token"]}'}

        user_token = r_admin_json["token"]

        r_user = requests.get(url=url_user, headers=headers)

        r_user_json = r_user.json()

        email = r_user_json['email']
        score_user = r_user_json['money_for_grades']
        phon = r_user_json['phone']

        await instruction(message)
        await state.finish()
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ª–æ–≥–∏–Ω")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Ç–≤–æ—Ä–Ω–æ")
        await User.user_password.set()


async def check_email(email):
    url = 'https://admin.sokratapp.ru/api/users/check_email/'

    data = {
        "email": email
    }

    r = requests.get(url=url, data=data)

    try:
        r.raise_for_status()
        return True
    except:
        return False


async def menu(message: types.Message):

    keyboard = types.InlineKeyboardMarkup()

    button1 = types.InlineKeyboardButton(text="–û–±–º–µ–Ω—è—Ç—å –æ—Ü–µ–Ω–∫—É —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω –¥–Ω–µ–≤–Ω–∏–∫", callback_data="online_diary")
    button2 = types.InlineKeyboardButton(text="–û–Ω–ª–∞–π–Ω –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="entrance")
    button3 = types.InlineKeyboardButton(text="–û–±–º–µ–Ω—è—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ —Ñ–æ—Ç–æ", callback_data="exchange")
    button4 = types.InlineKeyboardButton(text="–®–∫–æ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω", callback_data="online_diary")
    button5 = types.InlineKeyboardButton(text="–ü–æ–¥–±–µ—Ä–∏ —Ä–µ–ø–∏—Ç–∏—Ç–æ—Ä–∞", url="https://sokratapp.ru/courses/category/repetitori/")
    button6 = types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setting")

    keyboard.row(button1)
    keyboard.row(button2)
    keyboard.row(button3)
    keyboard.row(button4)
    keyboard.row(button5)
    keyboard.row(button6)

    await bot.send_photo(chat_id=message.chat.id,
        photo="https://downloader.disk.yandex.ru/preview/269dea1c26fd03511dc15c8f882192d1cb426565d3ebab81ca395fe36ad19a34/64349bd6/Eb7aDNN3SyZbfZoHBZKdVEr9N2DqxgbnVTwuaGpxRfavoL5Ma0_a80ZJBMrut8AitqUo7oGWHMZa1xwj9fou9Q%3D%3D?uid=0&filename=–ö–∞—Ä—Ç–∏–Ω–∫–∞%205.png&disposition=inline&hash=&limit=0&content_type=image%2Fpng&owner_uid=0&tknv=v2&size=714x943",
        caption=  f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–í–∞—à–∞ –ø–æ—á—Ç–∞: {email}  \n–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:  {phon}\n"
        f"–ì–æ—Ä–æ–¥: \n–ù–æ–º–µ—Ä —à–∫–æ–ª—ã: \n–ö–ª–∞—Å—Å: \n–ö—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Å—Ç—É–ø–∞—Ç—å:\n"
        f"\n–í–∞—à–∏ –º–æ–Ω–µ—Ç—ã –°–æ–∫—Ä–∞—Ç–∞: üü°{score_user}"
        f"\n\n‚Ü™Ô∏è –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞: https://t.me/Kalinenocbot",
                         reply_markup=keyboard)




async def user_reg(email, password,message: types.Message,state: FSMContext):

    if message.text == password:

        url = 'https://admin.sokratapp.ru/api/users/signup/'

        body = {
            "email": f"{email}",
            "first_name": "",
            "last_name": "",
            "password": f"{password}"
        }

        r = requests.post(url=url, data=body)

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é", callback_data="connect_program"))

        await message.answer("–£—Å–ø–µ—à–Ω–æ",reply_markup=keyboard)

    else:
        await message.answer("–í–≤–µ–¥–µ–Ω—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–æ–ª–∏")


async def _connect(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
    await User.user_email.set()


async def money_for_grades(count):
    url_user = f"https://admin.sokratapp.ru/api/user_me"
    global score_user
    headers = {'Authorization': f'Token {user_token}'}

    r_user = requests.get(url=url_user, headers=headers)
    r_user_json = r_user.json()

    score_user = r_user_json['money_for_grades'] + count

    grades = {'money_for_grades': f'{score_user}'}
    r = requests.patch(url=url_user, headers=headers, data=grades)

